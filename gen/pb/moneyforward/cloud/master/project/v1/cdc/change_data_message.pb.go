// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        (unknown)
// source: moneyforward/cloud/master/project/v1/cdc/change_data_message.proto

package pbmodel

import (
	date "google.golang.org/genproto/googleapis/type/date"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Record_OperationType int32

const (
	Record_CREATE Record_OperationType = 0
	Record_UPDATE Record_OperationType = 1
	Record_DELETE Record_OperationType = 2
)

// Enum value maps for Record_OperationType.
var (
	Record_OperationType_name = map[int32]string{
		0: "CREATE",
		1: "UPDATE",
		2: "DELETE",
	}
	Record_OperationType_value = map[string]int32{
		"CREATE": 0,
		"UPDATE": 1,
		"DELETE": 2,
	}
)

func (x Record_OperationType) Enum() *Record_OperationType {
	p := new(Record_OperationType)
	*p = x
	return p
}

func (x Record_OperationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Record_OperationType) Descriptor() protoreflect.EnumDescriptor {
	return file_moneyforward_cloud_master_project_v1_cdc_change_data_message_proto_enumTypes[0].Descriptor()
}

func (Record_OperationType) Type() protoreflect.EnumType {
	return &file_moneyforward_cloud_master_project_v1_cdc_change_data_message_proto_enumTypes[0]
}

func (x Record_OperationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Record_OperationType.Descriptor instead.
func (Record_OperationType) EnumDescriptor() ([]byte, []int) {
	return file_moneyforward_cloud_master_project_v1_cdc_change_data_message_proto_rawDescGZIP(), []int{1, 0}
}

type ChangeDataMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Published and sent by subsystems for requests idempotency. Send it back in the Kafka message header.
	RequestId string `protobuf:"bytes,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	// Sequential number of the messages in the request.
	MessageNumber uint32 `protobuf:"varint,2,opt,name=message_number,json=messageNumber,proto3" json:"message_number,omitempty"`
	// The total count of events in the request starting with `1`.`
	TotalMessageCount uint32 `protobuf:"varint,3,opt,name=total_message_count,json=totalMessageCount,proto3" json:"total_message_count,omitempty"`
	// tenant uid from Navis
	TenantUid uint64    `protobuf:"varint,4,opt,name=tenant_uid,json=tenantUid,proto3" json:"tenant_uid,omitempty"`
	Records   []*Record `protobuf:"bytes,5,rep,name=records,proto3" json:"records,omitempty"`
}

func (x *ChangeDataMessage) Reset() {
	*x = ChangeDataMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_moneyforward_cloud_master_project_v1_cdc_change_data_message_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChangeDataMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangeDataMessage) ProtoMessage() {}

func (x *ChangeDataMessage) ProtoReflect() protoreflect.Message {
	mi := &file_moneyforward_cloud_master_project_v1_cdc_change_data_message_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangeDataMessage.ProtoReflect.Descriptor instead.
func (*ChangeDataMessage) Descriptor() ([]byte, []int) {
	return file_moneyforward_cloud_master_project_v1_cdc_change_data_message_proto_rawDescGZIP(), []int{0}
}

func (x *ChangeDataMessage) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *ChangeDataMessage) GetMessageNumber() uint32 {
	if x != nil {
		return x.MessageNumber
	}
	return 0
}

func (x *ChangeDataMessage) GetTotalMessageCount() uint32 {
	if x != nil {
		return x.TotalMessageCount
	}
	return 0
}

func (x *ChangeDataMessage) GetTenantUid() uint64 {
	if x != nil {
		return x.TenantUid
	}
	return 0
}

func (x *ChangeDataMessage) GetRecords() []*Record {
	if x != nil {
		return x.Records
	}
	return nil
}

type Record struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OperationType Record_OperationType `protobuf:"varint,1,opt,name=operation_type,json=operationType,proto3,enum=moneyforward.cloud.master.project.v1.cdc.Record_OperationType" json:"operation_type,omitempty"`
	// Types that are assignable to Data:
	//
	//	*Record_Project
	//	*Record_ProjectTag
	//	*Record_Tag
	Data isRecord_Data `protobuf_oneof:"data"`
}

func (x *Record) Reset() {
	*x = Record{}
	if protoimpl.UnsafeEnabled {
		mi := &file_moneyforward_cloud_master_project_v1_cdc_change_data_message_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Record) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Record) ProtoMessage() {}

func (x *Record) ProtoReflect() protoreflect.Message {
	mi := &file_moneyforward_cloud_master_project_v1_cdc_change_data_message_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Record.ProtoReflect.Descriptor instead.
func (*Record) Descriptor() ([]byte, []int) {
	return file_moneyforward_cloud_master_project_v1_cdc_change_data_message_proto_rawDescGZIP(), []int{1}
}

func (x *Record) GetOperationType() Record_OperationType {
	if x != nil {
		return x.OperationType
	}
	return Record_CREATE
}

func (m *Record) GetData() isRecord_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (x *Record) GetProject() *Project {
	if x, ok := x.GetData().(*Record_Project); ok {
		return x.Project
	}
	return nil
}

func (x *Record) GetProjectTag() *ProjectTag {
	if x, ok := x.GetData().(*Record_ProjectTag); ok {
		return x.ProjectTag
	}
	return nil
}

func (x *Record) GetTag() *Tag {
	if x, ok := x.GetData().(*Record_Tag); ok {
		return x.Tag
	}
	return nil
}

type isRecord_Data interface {
	isRecord_Data()
}

type Record_Project struct {
	Project *Project `protobuf:"bytes,2,opt,name=project,proto3,oneof"`
}

type Record_ProjectTag struct {
	ProjectTag *ProjectTag `protobuf:"bytes,3,opt,name=project_tag,json=projectTag,proto3,oneof"`
}

type Record_Tag struct {
	Tag *Tag `protobuf:"bytes,4,opt,name=tag,proto3,oneof"`
}

func (*Record_Project) isRecord_Data() {}

func (*Record_ProjectTag) isRecord_Data() {}

func (*Record_Tag) isRecord_Data() {}

type Project struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                    string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Biid                  string                 `protobuf:"bytes,2,opt,name=biid,proto3" json:"biid,omitempty"`
	DepartmentBiid        *string                `protobuf:"bytes,3,opt,name=department_biid,json=departmentBiid,proto3,oneof" json:"department_biid,omitempty"`
	TenantUid             uint64                 `protobuf:"varint,4,opt,name=tenant_uid,json=tenantUid,proto3" json:"tenant_uid,omitempty"`
	ManagerUid            *uint64                `protobuf:"varint,5,opt,name=manager_uid,json=managerUid,proto3,oneof" json:"manager_uid,omitempty"`
	ManagerCode           *string                `protobuf:"bytes,21,opt,name=manager_code,json=managerCode,proto3,oneof" json:"manager_code,omitempty"`
	ManagerName           *string                `protobuf:"bytes,22,opt,name=manager_name,json=managerName,proto3,oneof" json:"manager_name,omitempty"`
	DeputyManagers        []*DeputyManager       `protobuf:"bytes,23,rep,name=deputy_managers,json=deputyManagers,proto3" json:"deputy_managers,omitempty"`
	Code                  string                 `protobuf:"bytes,6,opt,name=code,proto3" json:"code,omitempty"`
	Name                  string                 `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty"`
	ValidFrom             *date.Date             `protobuf:"bytes,8,opt,name=valid_from,json=validFrom,proto3" json:"valid_from,omitempty"`
	ValidTo               *date.Date             `protobuf:"bytes,9,opt,name=valid_to,json=validTo,proto3" json:"valid_to,omitempty"`
	TransactionFrom       *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=transaction_from,json=transactionFrom,proto3" json:"transaction_from,omitempty"`
	TransactionTo         *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=transaction_to,json=transactionTo,proto3" json:"transaction_to,omitempty"`
	TransactionFromBy     uint64                 `protobuf:"varint,12,opt,name=transaction_from_by,json=transactionFromBy,proto3" json:"transaction_from_by,omitempty"`
	TransactionToBy       uint64                 `protobuf:"varint,13,opt,name=transaction_to_by,json=transactionToBy,proto3" json:"transaction_to_by,omitempty"`
	TransactionFromByName string                 `protobuf:"bytes,14,opt,name=transaction_from_by_name,json=transactionFromByName,proto3" json:"transaction_from_by_name,omitempty"`
	TransactionToByName   string                 `protobuf:"bytes,15,opt,name=transaction_to_by_name,json=transactionToByName,proto3" json:"transaction_to_by_name,omitempty"`
	TransactionFromBySrv  string                 `protobuf:"bytes,16,opt,name=transaction_from_by_srv,json=transactionFromBySrv,proto3" json:"transaction_from_by_srv,omitempty"`
	TransactionToBySrv    string                 `protobuf:"bytes,17,opt,name=transaction_to_by_srv,json=transactionToBySrv,proto3" json:"transaction_to_by_srv,omitempty"`
	DispOrder             uint32                 `protobuf:"varint,18,opt,name=disp_order,json=dispOrder,proto3" json:"disp_order,omitempty"`
	SearchKey             string                 `protobuf:"bytes,19,opt,name=search_key,json=searchKey,proto3" json:"search_key,omitempty"`
	RelatedProjectBiid    *string                `protobuf:"bytes,24,opt,name=related_project_biid,json=relatedProjectBiid,proto3,oneof" json:"related_project_biid,omitempty"`
	AbortFlag             bool                   `protobuf:"varint,25,opt,name=abort_flag,json=abortFlag,proto3" json:"abort_flag,omitempty"`
	Version               uint32                 `protobuf:"varint,20,opt,name=version,proto3" json:"version,omitempty"` // next number 26;
}

func (x *Project) Reset() {
	*x = Project{}
	if protoimpl.UnsafeEnabled {
		mi := &file_moneyforward_cloud_master_project_v1_cdc_change_data_message_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Project) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Project) ProtoMessage() {}

func (x *Project) ProtoReflect() protoreflect.Message {
	mi := &file_moneyforward_cloud_master_project_v1_cdc_change_data_message_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Project.ProtoReflect.Descriptor instead.
func (*Project) Descriptor() ([]byte, []int) {
	return file_moneyforward_cloud_master_project_v1_cdc_change_data_message_proto_rawDescGZIP(), []int{2}
}

func (x *Project) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Project) GetBiid() string {
	if x != nil {
		return x.Biid
	}
	return ""
}

func (x *Project) GetDepartmentBiid() string {
	if x != nil && x.DepartmentBiid != nil {
		return *x.DepartmentBiid
	}
	return ""
}

func (x *Project) GetTenantUid() uint64 {
	if x != nil {
		return x.TenantUid
	}
	return 0
}

func (x *Project) GetManagerUid() uint64 {
	if x != nil && x.ManagerUid != nil {
		return *x.ManagerUid
	}
	return 0
}

func (x *Project) GetManagerCode() string {
	if x != nil && x.ManagerCode != nil {
		return *x.ManagerCode
	}
	return ""
}

func (x *Project) GetManagerName() string {
	if x != nil && x.ManagerName != nil {
		return *x.ManagerName
	}
	return ""
}

func (x *Project) GetDeputyManagers() []*DeputyManager {
	if x != nil {
		return x.DeputyManagers
	}
	return nil
}

func (x *Project) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *Project) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Project) GetValidFrom() *date.Date {
	if x != nil {
		return x.ValidFrom
	}
	return nil
}

func (x *Project) GetValidTo() *date.Date {
	if x != nil {
		return x.ValidTo
	}
	return nil
}

func (x *Project) GetTransactionFrom() *timestamppb.Timestamp {
	if x != nil {
		return x.TransactionFrom
	}
	return nil
}

func (x *Project) GetTransactionTo() *timestamppb.Timestamp {
	if x != nil {
		return x.TransactionTo
	}
	return nil
}

func (x *Project) GetTransactionFromBy() uint64 {
	if x != nil {
		return x.TransactionFromBy
	}
	return 0
}

func (x *Project) GetTransactionToBy() uint64 {
	if x != nil {
		return x.TransactionToBy
	}
	return 0
}

func (x *Project) GetTransactionFromByName() string {
	if x != nil {
		return x.TransactionFromByName
	}
	return ""
}

func (x *Project) GetTransactionToByName() string {
	if x != nil {
		return x.TransactionToByName
	}
	return ""
}

func (x *Project) GetTransactionFromBySrv() string {
	if x != nil {
		return x.TransactionFromBySrv
	}
	return ""
}

func (x *Project) GetTransactionToBySrv() string {
	if x != nil {
		return x.TransactionToBySrv
	}
	return ""
}

func (x *Project) GetDispOrder() uint32 {
	if x != nil {
		return x.DispOrder
	}
	return 0
}

func (x *Project) GetSearchKey() string {
	if x != nil {
		return x.SearchKey
	}
	return ""
}

func (x *Project) GetRelatedProjectBiid() string {
	if x != nil && x.RelatedProjectBiid != nil {
		return *x.RelatedProjectBiid
	}
	return ""
}

func (x *Project) GetAbortFlag() bool {
	if x != nil {
		return x.AbortFlag
	}
	return false
}

func (x *Project) GetVersion() uint32 {
	if x != nil {
		return x.Version
	}
	return 0
}

type DeputyManager struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid  uint64  `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Code *string `protobuf:"bytes,2,opt,name=code,proto3,oneof" json:"code,omitempty"`
	Name string  `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"` // next number 4;
}

func (x *DeputyManager) Reset() {
	*x = DeputyManager{}
	if protoimpl.UnsafeEnabled {
		mi := &file_moneyforward_cloud_master_project_v1_cdc_change_data_message_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeputyManager) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeputyManager) ProtoMessage() {}

func (x *DeputyManager) ProtoReflect() protoreflect.Message {
	mi := &file_moneyforward_cloud_master_project_v1_cdc_change_data_message_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeputyManager.ProtoReflect.Descriptor instead.
func (*DeputyManager) Descriptor() ([]byte, []int) {
	return file_moneyforward_cloud_master_project_v1_cdc_change_data_message_proto_rawDescGZIP(), []int{3}
}

func (x *DeputyManager) GetUid() uint64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *DeputyManager) GetCode() string {
	if x != nil && x.Code != nil {
		return *x.Code
	}
	return ""
}

func (x *DeputyManager) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type ProjectTag struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId string `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	TenantUid uint64 `protobuf:"varint,2,opt,name=tenant_uid,json=tenantUid,proto3" json:"tenant_uid,omitempty"`
	TagBiid   string `protobuf:"bytes,3,opt,name=tag_biid,json=tagBiid,proto3" json:"tag_biid,omitempty"` // next number 4;
}

func (x *ProjectTag) Reset() {
	*x = ProjectTag{}
	if protoimpl.UnsafeEnabled {
		mi := &file_moneyforward_cloud_master_project_v1_cdc_change_data_message_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProjectTag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProjectTag) ProtoMessage() {}

func (x *ProjectTag) ProtoReflect() protoreflect.Message {
	mi := &file_moneyforward_cloud_master_project_v1_cdc_change_data_message_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProjectTag.ProtoReflect.Descriptor instead.
func (*ProjectTag) Descriptor() ([]byte, []int) {
	return file_moneyforward_cloud_master_project_v1_cdc_change_data_message_proto_rawDescGZIP(), []int{4}
}

func (x *ProjectTag) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *ProjectTag) GetTenantUid() uint64 {
	if x != nil {
		return x.TenantUid
	}
	return 0
}

func (x *ProjectTag) GetTagBiid() string {
	if x != nil {
		return x.TagBiid
	}
	return ""
}

type Tag struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                    string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Biid                  string                 `protobuf:"bytes,2,opt,name=biid,proto3" json:"biid,omitempty"`
	TenantUid             uint64                 `protobuf:"varint,3,opt,name=tenant_uid,json=tenantUid,proto3" json:"tenant_uid,omitempty"`
	Name                  string                 `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	TransactionFrom       *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=transaction_from,json=transactionFrom,proto3" json:"transaction_from,omitempty"`
	TransactionTo         *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=transaction_to,json=transactionTo,proto3" json:"transaction_to,omitempty"`
	TransactionFromBy     uint64                 `protobuf:"varint,7,opt,name=transaction_from_by,json=transactionFromBy,proto3" json:"transaction_from_by,omitempty"`
	TransactionToBy       uint64                 `protobuf:"varint,8,opt,name=transaction_to_by,json=transactionToBy,proto3" json:"transaction_to_by,omitempty"`
	TransactionFromByName string                 `protobuf:"bytes,9,opt,name=transaction_from_by_name,json=transactionFromByName,proto3" json:"transaction_from_by_name,omitempty"`
	TransactionToByName   string                 `protobuf:"bytes,10,opt,name=transaction_to_by_name,json=transactionToByName,proto3" json:"transaction_to_by_name,omitempty"`
	TransactionFromBySrv  string                 `protobuf:"bytes,11,opt,name=transaction_from_by_srv,json=transactionFromBySrv,proto3" json:"transaction_from_by_srv,omitempty"`
	TransactionToBySrv    string                 `protobuf:"bytes,12,opt,name=transaction_to_by_srv,json=transactionToBySrv,proto3" json:"transaction_to_by_srv,omitempty"`
	Version               uint32                 `protobuf:"varint,13,opt,name=version,proto3" json:"version,omitempty"` // next number 14;
}

func (x *Tag) Reset() {
	*x = Tag{}
	if protoimpl.UnsafeEnabled {
		mi := &file_moneyforward_cloud_master_project_v1_cdc_change_data_message_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tag) ProtoMessage() {}

func (x *Tag) ProtoReflect() protoreflect.Message {
	mi := &file_moneyforward_cloud_master_project_v1_cdc_change_data_message_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tag.ProtoReflect.Descriptor instead.
func (*Tag) Descriptor() ([]byte, []int) {
	return file_moneyforward_cloud_master_project_v1_cdc_change_data_message_proto_rawDescGZIP(), []int{5}
}

func (x *Tag) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Tag) GetBiid() string {
	if x != nil {
		return x.Biid
	}
	return ""
}

func (x *Tag) GetTenantUid() uint64 {
	if x != nil {
		return x.TenantUid
	}
	return 0
}

func (x *Tag) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Tag) GetTransactionFrom() *timestamppb.Timestamp {
	if x != nil {
		return x.TransactionFrom
	}
	return nil
}

func (x *Tag) GetTransactionTo() *timestamppb.Timestamp {
	if x != nil {
		return x.TransactionTo
	}
	return nil
}

func (x *Tag) GetTransactionFromBy() uint64 {
	if x != nil {
		return x.TransactionFromBy
	}
	return 0
}

func (x *Tag) GetTransactionToBy() uint64 {
	if x != nil {
		return x.TransactionToBy
	}
	return 0
}

func (x *Tag) GetTransactionFromByName() string {
	if x != nil {
		return x.TransactionFromByName
	}
	return ""
}

func (x *Tag) GetTransactionToByName() string {
	if x != nil {
		return x.TransactionToByName
	}
	return ""
}

func (x *Tag) GetTransactionFromBySrv() string {
	if x != nil {
		return x.TransactionFromBySrv
	}
	return ""
}

func (x *Tag) GetTransactionToBySrv() string {
	if x != nil {
		return x.TransactionToBySrv
	}
	return ""
}

func (x *Tag) GetVersion() uint32 {
	if x != nil {
		return x.Version
	}
	return 0
}

var File_moneyforward_cloud_master_project_v1_cdc_change_data_message_proto protoreflect.FileDescriptor

var file_moneyforward_cloud_master_project_v1_cdc_change_data_message_proto_rawDesc = []byte{
	0x0a, 0x42, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x2f, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x64, 0x63, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x28, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x66, 0x6f, 0x72, 0x77, 0x61,
	0x72, 0x64, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x64, 0x63, 0x1a, 0x1f,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x16, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x2f, 0x64, 0x61, 0x74,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xf4, 0x01, 0x0a, 0x11, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x12, 0x2e, 0x0a, 0x13, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x11, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x75, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x55,
	0x69, 0x64, 0x12, 0x4a, 0x0a, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x66, 0x6f, 0x72, 0x77, 0x61,
	0x72, 0x64, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x64, 0x63, 0x2e, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x22, 0x97,
	0x03, 0x0a, 0x06, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x65, 0x0a, 0x0e, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x3e, 0x2e, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x64, 0x63, 0x2e, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x0d, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x4d, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x31, 0x2e, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x64, 0x63, 0x2e, 0x50, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x48, 0x00, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12,
	0x57, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x74, 0x61, 0x67, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x66, 0x6f, 0x72, 0x77,
	0x61, 0x72, 0x64, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72,
	0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x64, 0x63, 0x2e,
	0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x61, 0x67, 0x48, 0x00, 0x52, 0x0a, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x61, 0x67, 0x12, 0x41, 0x0a, 0x03, 0x74, 0x61, 0x67, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x66, 0x6f, 0x72,
	0x77, 0x61, 0x72, 0x64, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65,
	0x72, 0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x64, 0x63,
	0x2e, 0x54, 0x61, 0x67, 0x48, 0x00, 0x52, 0x03, 0x74, 0x61, 0x67, 0x22, 0x33, 0x0a, 0x0d, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0a, 0x0a, 0x06,
	0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x55, 0x50, 0x44, 0x41,
	0x54, 0x45, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x02,
	0x42, 0x06, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xa5, 0x09, 0x0a, 0x07, 0x50, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x69, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x62, 0x69, 0x69, 0x64, 0x12, 0x2c, 0x0a, 0x0f, 0x64, 0x65, 0x70, 0x61,
	0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x62, 0x69, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x0e, 0x64, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x42,
	0x69, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74,
	0x5f, 0x75, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x74, 0x65, 0x6e, 0x61,
	0x6e, 0x74, 0x55, 0x69, 0x64, 0x12, 0x24, 0x0a, 0x0b, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x5f, 0x75, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x48, 0x01, 0x52, 0x0a, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x55, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x02, 0x52, 0x0b, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x43, 0x6f, 0x64, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x0b, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x60, 0x0a, 0x0f, 0x64,
	0x65, 0x70, 0x75, 0x74, 0x79, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x73, 0x18, 0x17,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x66, 0x6f, 0x72, 0x77,
	0x61, 0x72, 0x64, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72,
	0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x64, 0x63, 0x2e,
	0x44, 0x65, 0x70, 0x75, 0x74, 0x79, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x52, 0x0e, 0x64,
	0x65, 0x70, 0x75, 0x74, 0x79, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x73, 0x12, 0x12, 0x0a,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x0a, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x66,
	0x72, 0x6f, 0x6d, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x52, 0x09, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x2c, 0x0a, 0x08, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x5f, 0x74, 0x6f, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x52, 0x07, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x54, 0x6f, 0x12, 0x45, 0x0a, 0x10, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0f, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x41, 0x0a, 0x0e,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x6f, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x12,
	0x2e, 0x0a, 0x13, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66,
	0x72, 0x6f, 0x6d, 0x5f, 0x62, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x72, 0x6f, 0x6d, 0x42, 0x79, 0x12,
	0x2a, 0x0a, 0x11, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74,
	0x6f, 0x5f, 0x62, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x42, 0x79, 0x12, 0x37, 0x0a, 0x18, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f,
	0x62, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x72, 0x6f, 0x6d, 0x42, 0x79,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x33, 0x0a, 0x16, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x6f, 0x5f, 0x62, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x6f, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x17, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x62, 0x79,
	0x5f, 0x73, 0x72, 0x76, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x72, 0x6f, 0x6d, 0x42, 0x79, 0x53, 0x72, 0x76,
	0x12, 0x31, 0x0a, 0x15, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x74, 0x6f, 0x5f, 0x62, 0x79, 0x5f, 0x73, 0x72, 0x76, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x12, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x42, 0x79,
	0x53, 0x72, 0x76, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x69, 0x73, 0x70, 0x5f, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x64, 0x69, 0x73, 0x70, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x6b, 0x65, 0x79,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4b, 0x65,
	0x79, 0x12, 0x35, 0x0a, 0x14, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x5f, 0x62, 0x69, 0x69, 0x64, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x04, 0x52, 0x12, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x42, 0x69, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x62, 0x6f, 0x72,
	0x74, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x19, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x61, 0x62,
	0x6f, 0x72, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x64, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x62, 0x69, 0x69, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x5f, 0x75, 0x69, 0x64, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x72, 0x65, 0x6c, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x62, 0x69, 0x69, 0x64,
	0x22, 0x57, 0x0a, 0x0d, 0x44, 0x65, 0x70, 0x75, 0x74, 0x79, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03,
	0x75, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x42, 0x07, 0x0a, 0x05, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x65, 0x0a, 0x0a, 0x50, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x54, 0x61, 0x67, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74,
	0x5f, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x74, 0x65, 0x6e, 0x61,
	0x6e, 0x74, 0x55, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x61, 0x67, 0x5f, 0x62, 0x69, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x61, 0x67, 0x42, 0x69, 0x69, 0x64,
	0x22, 0xb4, 0x04, 0x0a, 0x03, 0x54, 0x61, 0x67, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x69, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x62, 0x69, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x09, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x55, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x45, 0x0a, 0x10, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66,
	0x72, 0x6f, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x41, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x12, 0x2e, 0x0a, 0x13, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x62, 0x79,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x46, 0x72, 0x6f, 0x6d, 0x42, 0x79, 0x12, 0x2a, 0x0a, 0x11, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x6f, 0x5f, 0x62, 0x79, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x6f, 0x42, 0x79, 0x12, 0x37, 0x0a, 0x18, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x62, 0x79, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x46, 0x72, 0x6f, 0x6d, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x33,
	0x0a, 0x16, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x6f,
	0x5f, 0x62, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x42, 0x79, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x17, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x62, 0x79, 0x5f, 0x73, 0x72, 0x76, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x46, 0x72, 0x6f, 0x6d, 0x42, 0x79, 0x53, 0x72, 0x76, 0x12, 0x31, 0x0a, 0x15, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x6f, 0x5f, 0x62, 0x79, 0x5f,
	0x73, 0x72, 0x76, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x42, 0x79, 0x53, 0x72, 0x76, 0x12, 0x18, 0x0a,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x10, 0x5a, 0x0e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x73, 0x2f, 0x70, 0x62, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_moneyforward_cloud_master_project_v1_cdc_change_data_message_proto_rawDescOnce sync.Once
	file_moneyforward_cloud_master_project_v1_cdc_change_data_message_proto_rawDescData = file_moneyforward_cloud_master_project_v1_cdc_change_data_message_proto_rawDesc
)

func file_moneyforward_cloud_master_project_v1_cdc_change_data_message_proto_rawDescGZIP() []byte {
	file_moneyforward_cloud_master_project_v1_cdc_change_data_message_proto_rawDescOnce.Do(func() {
		file_moneyforward_cloud_master_project_v1_cdc_change_data_message_proto_rawDescData = protoimpl.X.CompressGZIP(file_moneyforward_cloud_master_project_v1_cdc_change_data_message_proto_rawDescData)
	})
	return file_moneyforward_cloud_master_project_v1_cdc_change_data_message_proto_rawDescData
}

var file_moneyforward_cloud_master_project_v1_cdc_change_data_message_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_moneyforward_cloud_master_project_v1_cdc_change_data_message_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_moneyforward_cloud_master_project_v1_cdc_change_data_message_proto_goTypes = []interface{}{
	(Record_OperationType)(0),     // 0: moneyforward.cloud.master.project.v1.cdc.Record.OperationType
	(*ChangeDataMessage)(nil),     // 1: moneyforward.cloud.master.project.v1.cdc.ChangeDataMessage
	(*Record)(nil),                // 2: moneyforward.cloud.master.project.v1.cdc.Record
	(*Project)(nil),               // 3: moneyforward.cloud.master.project.v1.cdc.Project
	(*DeputyManager)(nil),         // 4: moneyforward.cloud.master.project.v1.cdc.DeputyManager
	(*ProjectTag)(nil),            // 5: moneyforward.cloud.master.project.v1.cdc.ProjectTag
	(*Tag)(nil),                   // 6: moneyforward.cloud.master.project.v1.cdc.Tag
	(*date.Date)(nil),             // 7: google.type.Date
	(*timestamppb.Timestamp)(nil), // 8: google.protobuf.Timestamp
}
var file_moneyforward_cloud_master_project_v1_cdc_change_data_message_proto_depIdxs = []int32{
	2,  // 0: moneyforward.cloud.master.project.v1.cdc.ChangeDataMessage.records:type_name -> moneyforward.cloud.master.project.v1.cdc.Record
	0,  // 1: moneyforward.cloud.master.project.v1.cdc.Record.operation_type:type_name -> moneyforward.cloud.master.project.v1.cdc.Record.OperationType
	3,  // 2: moneyforward.cloud.master.project.v1.cdc.Record.project:type_name -> moneyforward.cloud.master.project.v1.cdc.Project
	5,  // 3: moneyforward.cloud.master.project.v1.cdc.Record.project_tag:type_name -> moneyforward.cloud.master.project.v1.cdc.ProjectTag
	6,  // 4: moneyforward.cloud.master.project.v1.cdc.Record.tag:type_name -> moneyforward.cloud.master.project.v1.cdc.Tag
	4,  // 5: moneyforward.cloud.master.project.v1.cdc.Project.deputy_managers:type_name -> moneyforward.cloud.master.project.v1.cdc.DeputyManager
	7,  // 6: moneyforward.cloud.master.project.v1.cdc.Project.valid_from:type_name -> google.type.Date
	7,  // 7: moneyforward.cloud.master.project.v1.cdc.Project.valid_to:type_name -> google.type.Date
	8,  // 8: moneyforward.cloud.master.project.v1.cdc.Project.transaction_from:type_name -> google.protobuf.Timestamp
	8,  // 9: moneyforward.cloud.master.project.v1.cdc.Project.transaction_to:type_name -> google.protobuf.Timestamp
	8,  // 10: moneyforward.cloud.master.project.v1.cdc.Tag.transaction_from:type_name -> google.protobuf.Timestamp
	8,  // 11: moneyforward.cloud.master.project.v1.cdc.Tag.transaction_to:type_name -> google.protobuf.Timestamp
	12, // [12:12] is the sub-list for method output_type
	12, // [12:12] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_moneyforward_cloud_master_project_v1_cdc_change_data_message_proto_init() }
func file_moneyforward_cloud_master_project_v1_cdc_change_data_message_proto_init() {
	if File_moneyforward_cloud_master_project_v1_cdc_change_data_message_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_moneyforward_cloud_master_project_v1_cdc_change_data_message_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChangeDataMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_moneyforward_cloud_master_project_v1_cdc_change_data_message_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Record); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_moneyforward_cloud_master_project_v1_cdc_change_data_message_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Project); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_moneyforward_cloud_master_project_v1_cdc_change_data_message_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeputyManager); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_moneyforward_cloud_master_project_v1_cdc_change_data_message_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProjectTag); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_moneyforward_cloud_master_project_v1_cdc_change_data_message_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tag); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_moneyforward_cloud_master_project_v1_cdc_change_data_message_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*Record_Project)(nil),
		(*Record_ProjectTag)(nil),
		(*Record_Tag)(nil),
	}
	file_moneyforward_cloud_master_project_v1_cdc_change_data_message_proto_msgTypes[2].OneofWrappers = []interface{}{}
	file_moneyforward_cloud_master_project_v1_cdc_change_data_message_proto_msgTypes[3].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_moneyforward_cloud_master_project_v1_cdc_change_data_message_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_moneyforward_cloud_master_project_v1_cdc_change_data_message_proto_goTypes,
		DependencyIndexes: file_moneyforward_cloud_master_project_v1_cdc_change_data_message_proto_depIdxs,
		EnumInfos:         file_moneyforward_cloud_master_project_v1_cdc_change_data_message_proto_enumTypes,
		MessageInfos:      file_moneyforward_cloud_master_project_v1_cdc_change_data_message_proto_msgTypes,
	}.Build()
	File_moneyforward_cloud_master_project_v1_cdc_change_data_message_proto = out.File
	file_moneyforward_cloud_master_project_v1_cdc_change_data_message_proto_rawDesc = nil
	file_moneyforward_cloud_master_project_v1_cdc_change_data_message_proto_goTypes = nil
	file_moneyforward_cloud_master_project_v1_cdc_change_data_message_proto_depIdxs = nil
}
